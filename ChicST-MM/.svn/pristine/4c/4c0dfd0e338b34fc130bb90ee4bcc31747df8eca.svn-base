using ChicST_MM.IBLL;
using ChicST_MM.WEB.Models;
using JPager.Net;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Web.Mvc;
using ChicST_MM.IBLL;

namespace ChicST_MM.WEB.Controllers
{
    public class ReceivingRecordsController : Controller
    {

        private readonly IReceivingRecordsBLL receivingRecordsBLL;
        private readonly IAccountBLL accountBLL;
        private readonly IDistributorBLL distributorBLL;
        private readonly IBusinessTrip_TypeBLL businessTrip_TypeBLL;
        private readonly IStoreBLL storeBLL;
        private readonly IDepartmentBLL departmentBLL;
        private readonly IEmployeeInformationBLL employeeInformationBLL;

        public ReceivingRecordsController(IReceivingRecordsBLL receivingRecordsBLL, IAccountBLL accountBLL, IDistributorBLL distributorBLL, IBusinessTrip_TypeBLL businessTrip_TypeBLL, IStoreBLL storeBLL, IDepartmentBLL departmentBLL, IEmployeeInformationBLL employeeInformationBLL)
        {
            this.receivingRecordsBLL = receivingRecordsBLL;
            this.accountBLL = accountBLL;
            this.distributorBLL = distributorBLL;
            this.businessTrip_TypeBLL = businessTrip_TypeBLL;
            this.storeBLL = storeBLL;
            this.departmentBLL = departmentBLL;
            this.employeeInformationBLL = employeeInformationBLL;
        }


        // GET: ReceivingRecords
        /// <summary>
        /// 接待记录查询页
        /// </summary>
        /// <returns></returns>
        public ActionResult ReceivingRecordsIndex(string searchString,PagerInBase pagerInBase)
        {
            Session["View"] = true;
            //获得数据
            var models = GetReceivingRecords(0).OrderByDescending(p=>p.ID).ToList();
            //搜索数据
            var query = searchString != null ?
                models.Where(t => t.接待对象.Contains(searchString)).ToList() :
                models.ToList();
            //默认倒叙排列

            query = query.OrderByDescending(p => p.ID).ToList();
            //分页数据
            var data = query.Skip(pagerInBase.Skip).Take(pagerInBase.PageSize);

            var count = models.Count;
            var res = new PagerResult<ReceivingRecordsViewModel>
            {
                Code = 0,
                DataList = data,
                Total = count,
                PageSize = pagerInBase.PageSize,
                PageIndex = pagerInBase.PageIndex,
                RequestUrl = pagerInBase.RequetUrl
            };
            return View(res);
        }


        /// <summary>
        /// 添加接待记录
        /// </summary>
        /// <returns></returns>
        public ViewResult AddReceivingRecordsView() {
            Session["View"] = true;
            

            return View();
        }

        /// <summary>
        /// 接待记录提交
        /// </summary>
        /// <param name="receivingRecordsViewModel"></param>
        /// <returns></returns>
        [HttpPost]
        public ActionResult ReceivingRecordsAdd(ReceivingRecordsViewModel receivingRecordsViewModel) {
            if (Session["View"].ToString() == "false")
            {
                return Content("<script>alert('重复操作！');parent.location.href='ReceivingRecordsIndex';</script>");
            }
            var ac = GetAccountInfo();
            Session["View"] = false;
            HR_接待记录 model = new HR_接待记录();
            model.关联审核人ID = receivingRecordsViewModel.关联审核人ID;
            model.备注 = receivingRecordsViewModel.备注;
            model.接待地点 = receivingRecordsViewModel.接待地点;
            model.接待大概内容 = receivingRecordsViewModel.接待大概内容;
            model.接待对象 = receivingRecordsViewModel.接待对象;
            
            model.接待对象所属ID = receivingRecordsViewModel.接待对象所属方ID;
            model.接待对象所属类型ID = receivingRecordsViewModel.接待对象所属类型ID;
            model.接待对象职务 = receivingRecordsViewModel.接待对象职务;
            model.接待开始时间 = receivingRecordsViewModel.接待开始时间;
            model.接待目的 = receivingRecordsViewModel.接待目的;
            model.接待结束时间 = receivingRecordsViewModel.接待结束时间;
            model.接待计划 = receivingRecordsViewModel.接待计划;
            model.提交人ID = ac.用户ID;
            model.提交时间 = DateTime.Now;
            model.新的问题 = receivingRecordsViewModel.新的问题;
            model.新的问题应对方案 = receivingRecordsViewModel.新的问题应对方案;
            model.部门ID = ac.部门;
            model.预计完成可能性 = receivingRecordsViewModel.预计完成可能性;
            model.预计完成日期 = receivingRecordsViewModel.预计完成日期;

            if (ModelState.IsValid)
            {
                model = receivingRecordsBLL.AddReturnModel(model);
                Session["View"] = false;
            }

            else
            {
                List<string> sb = new List<string>();
                //获取所有错误的Key
                List<string> Keys = ModelState.Keys.ToList();
                //获取每一个key对应的ModelStateDictionary
                foreach (var key in Keys)
                {
                    var errors = ModelState[key].Errors.ToList();
                    //将错误描述添加到sb中
                    foreach (var error in errors)
                    {
                        sb.Add(error.ErrorMessage);
                    }
                }
                string msg = null;
                foreach (var item in sb)
                {
                    msg += item.ToString() + "<br/>";
                }
                return Content("<script>alert('" + msg + "');window.history.go(-1);</script>");
            }
            return RedirectToAction("ReceivingRecords_DetailsView", new {id=model.ID });
        }
        /// <summary>
        /// 接待记录详细
        /// </summary>
        /// <returns></returns>
        public ViewResult ReceivingRecords_DetailsView(int id,string role)
        {
            Session["View"] = true;

            var model = receivingRecordsBLL.GetModel(p => p.ID == id);
            ReceivingRecordsViewModel receivingRecordsViewModel = new ReceivingRecordsViewModel();
            receivingRecordsViewModel = GetReceivingRecord(model);

            ViewBag.Role = role;
            return View(receivingRecordsViewModel);
        }

        /// <summary>
        /// 接待记录审核
        /// </summary>
        /// <returns></returns>
        public ViewResult ReceivingRecords_CheckView(string searchString,PagerInBase pagerInBase)
        {
            Session["View"] = true;
            var models = GetReceivingRecords(1).OrderByDescending(p => p.ID).ToList();
            //搜索数据
            var query = searchString != null ?
                models.Where(t => t.接待对象.Contains(searchString)).ToList() :
                models.ToList();
            //默认倒叙排列
            query = query.OrderByDescending(p => p.ID).ToList();
            //分页数据
            var data = query.Skip(pagerInBase.Skip).Take(pagerInBase.PageSize);

            var count = models.Count;
            var res = new PagerResult<ReceivingRecordsViewModel>
            {
                Code = 0,
                DataList = data,
                Total = count,
                PageSize = pagerInBase.PageSize,
                PageIndex = pagerInBase.PageIndex,
                RequestUrl = pagerInBase.RequetUrl
            };
            return View(res);

        }

        /// <summary>
        /// 接待审核
        /// </summary>
        /// <param name="id">记录ID</param>
        /// <param name="checkString">审核状态</param>
        /// <returns></returns>
        public ActionResult CheckRecord(int id,string checkString) {
            var model = receivingRecordsBLL.GetModel(p => p.ID == id);
            int n = int.Parse(checkString);
            if (model==null)
            {
                return Content("<script>alert('数据异常！');parent.location.href='ReceivingRecords_CheckView';</script>");
            }
            if (n ==0)
            {
                model.审批状态 = false;
                
            }
            if (n == 1)
            {
                model.审批状态 = true;

            }
            try
            {
                string[] property = new string[1];
                property[0] = "审批状态";
                receivingRecordsBLL.Modify(model, property);
            }
            catch (Exception e)
            {

                throw e;
            }
           
            return RedirectToAction("ReceivingRecords_CheckView");
        }

        /// <summary>
        /// 获得所属方类型
        /// </summary>
        /// <returns></returns>
        public JsonResult GetBusinessTripType()
        {

            var tripTypes = businessTrip_TypeBLL.GetModels(p => true).ToList();
            var tripType = new ArrayList();
            foreach (var item in tripTypes)
            {

                var Type = new string[] { item.ID.ToString(), item.对象类型 };
                tripType.Add(Type);
            }
            return Json(tripType);
        }


        /// <summary>
        /// 获得接待对象所属方
        /// </summary>
        /// <param name="type">所属方类型</param>
        /// <returns></returns>
        public JsonResult GetTripObj(string type)
        {
            int n = int.Parse(type);
            var tripType = businessTrip_TypeBLL.GetModel(p => p.ID == n);
            if (tripType.ID == 3)//门店
            {
                var stores = storeBLL.GetModels(p =>true);
                var tripObj = new ArrayList();
                foreach (var item in stores)
                {

                    var store = new string[] { item.ID.ToString(), item.名称 };
                    tripObj.Add(store);
                }
                return Json(tripObj);
            }
            if (tripType.ID == 4)//经销商
            {
                var distributors = distributorBLL.GetModels(p => true).ToList();
                var tripObj = new ArrayList();
                foreach (var item in distributors)
                {

                    var distributor = new string[] { item.ID.ToString(), item.名称 };
                    tripObj.Add(distributor);

                }
                return Json(tripObj);

            }
            if (tripType.ID == 5)//或物业
            {
                var stores = storeBLL.GetModels(p => true);
                var tripObj = new ArrayList();
                foreach (var item in stores)
                {

                    var store = new string[] { item.ID.ToString(), item.商场 };
                    tripObj.Add(store);
                }
                return Json(tripObj);
            }
            else
            {
                return Json(null);
            }

        }

        /// <summary>
        /// 获取关联审核人
        /// </summary>
        /// <returns></returns>
        public JsonResult GetAssociatedAuditor()
        {
            var models = GetCompanyStaff();
            if (models.Count() <= 0)
            {
                return Json("");
            }
            var tripObj = new ArrayList();
            foreach (var item in models)
            {

                var Auditor = new string[] { item.用户ID.ToString(), item.姓名 };
                tripObj.Add(Auditor);
            }
            return Json(tripObj);
        }

        /// <summary>
        /// 构造接待数据
        /// </summary>
        /// <param name="role"></param>
        /// <returns></returns>
        private List<ReceivingRecordsViewModel> GetReceivingRecords(int role) {
            var ac = GetAccountInfo();
            List<HR_接待记录> models = new List<HR_接待记录>();
            if (role==0)//查看自己提交
            {
                models = receivingRecordsBLL.GetModels(p => p.提交人ID == ac.用户ID).ToList() ;
            }
            if (role==1)
            {
                models = receivingRecordsBLL.GetModels(p => p.关联审核人ID == ac.用户ID).ToList();
            }
            List<ReceivingRecordsViewModel> receivingRecordsViewModels = new List<ReceivingRecordsViewModel>();
            ReceivingRecordsViewModel receivingRecordsViewModel = new ReceivingRecordsViewModel();
            foreach (var item in models)
            {
                receivingRecordsViewModel = GetReceivingRecord(item);
                receivingRecordsViewModels.Add(receivingRecordsViewModel);
            }

            return receivingRecordsViewModels;

        }

        /// <summary>
        /// 构造单个接待数据
        /// </summary>
        /// <param name="id">接待ID</param>
        /// <returns></returns>
        private ReceivingRecordsViewModel GetReceivingRecord(HR_接待记录 model) {
            
            ReceivingRecordsViewModel receivingRecord = new ReceivingRecordsViewModel();
            receivingRecord.ID = model.ID;
            receivingRecord.关联审核人ID = model.关联审核人ID;
            try
            {
                receivingRecord.关联审核人 = employeeInformationBLL.GetModel(p => p.用户ID == model.关联审核人ID).姓名;
                receivingRecord.备注 = model.备注;
                receivingRecord.接待地点 = model.接待地点;
                receivingRecord.接待大概内容 = model.接待大概内容;
                receivingRecord.接待对象所属类型ID = model.接待对象所属类型ID;
                receivingRecord.接待对象所属方类型 = businessTrip_TypeBLL.GetModel(p => p.ID == model.接待对象所属类型ID).对象类型;

                receivingRecord.接待对象所属方ID = model.接待对象所属ID;
                switch (receivingRecord.接待对象所属方类型)
                {
                    case "门店":
                        receivingRecord.接待对象所属方 = storeBLL.GetModel(p => p.ID == model.接待对象所属ID).名称;
                        break;
                    case "经销商":
                        receivingRecord.接待对象所属方 = distributorBLL.GetModel(p => p.ID == model.接待对象所属ID).名称;
                        break;
                    case "物业":
                        receivingRecord.接待对象所属方 = storeBLL.GetModel(p => p.ID == model.接待对象所属ID).商场;
                        break;
                    default:
                        receivingRecord.接待对象所属方 = null;
                        break;
                }
                receivingRecord.接待对象 = model.接待对象;
                receivingRecord.接待对象职务 = model.接待对象职务;
                receivingRecord.接待开始时间 = model.接待开始时间;
                receivingRecord.接待目的 = model.接待目的;
                receivingRecord.接待结束时间 = model.接待结束时间;
                receivingRecord.接待计划 = model.接待计划;
                receivingRecord.提交人ID = model.提交人ID;
                receivingRecord.提交人 = employeeInformationBLL.GetModel(p => p.用户ID == model.提交人ID).姓名;
                receivingRecord.提交时间 = model.提交时间;
                receivingRecord.新的问题 = model.新的问题;
                receivingRecord.新的问题应对方案 = model.新的问题应对方案;
                receivingRecord.部门ID = model.部门ID;
                receivingRecord.部门 = departmentBLL.GetModel(p => p.ID == model.部门ID).名称;
                receivingRecord.预计完成可能性 = model.预计完成可能性;
                receivingRecord.预计完成日期 = model.预计完成日期.Value;
                if (model.审批状态!=null)
                {
                    if (model.审批状态.Value)
                    {
                        receivingRecord.审批结果 = "通过";
                    }
                    else
                    {
                        receivingRecord.审批结果 = "未通过";
                    }
                   
                }
                else
                {
                    receivingRecord.审批结果 = "未审批";
                }
            }
            catch (Exception e)
            {

                throw e;
            }
          
            return receivingRecord;


        }

        /// <summary>
        /// 获取公司员工信息
        /// </summary>
        /// <returns></returns>
        private List<CompanyStaffViewModel> GetCompanyStaff()
        {
            List<CompanyStaffViewModel> companyStaffViewModel = new List<CompanyStaffViewModel>();

            var accounts = accountBLL.GetModels(p => true).ToList();
            var employees = employeeInformationBLL.GetModels(p => true).ToList();
            for (int i = 0; i < accounts.Count(); i++)
            {
                HR_人员信息表 m = new HR_人员信息表();
                try
                {
                    var id = accounts.ElementAt(i).ID;
                    m = employeeInformationBLL.GetModel(p => p.用户ID == id);
                }
                catch (Exception e)
                {

                    throw e;
                }
                CompanyStaffViewModel ac = new CompanyStaffViewModel();
                if (m != null)
                {
                    ac.ID = m.ID;
                    ac.上级部门 = m.上级部门;
                    ac.姓名 = m.姓名;
                    ac.岗位 = m.岗位;
                    ac.用户ID = m.用户ID;
                    ac.职级 = m.职级;
                    ac.部门 = m.部门;
                    companyStaffViewModel.Add(ac);
                }
            }
            return companyStaffViewModel;
        }

        /// <summary>
        /// 设置当前的用户信息
        /// </summary>
        private AcountInformation GetAccountInfo()
        {

            string userName = HttpContext.User.Identity.Name;
            if (userName != null)
            {

                var account = HttpContext.Session["Account"] as AcountInformation;
                return account;
            }
            else
            {
                return null;
            }

        }
    }
}