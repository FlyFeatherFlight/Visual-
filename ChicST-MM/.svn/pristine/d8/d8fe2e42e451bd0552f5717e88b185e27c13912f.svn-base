using ChicST_MM.IBLL;
using ChicST_MM.WEB.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace ChicST_MM.WEB.Controllers
{
    /// <summary>
    /// 报销控制
    /// </summary>
    public class ReimbursementController : Controller
    {
        private readonly IBusinessTripBLL businessTripBLL;
        private readonly IAccountBLL accountBLL;
        private readonly IEmployeeInformationBLL employeeInformationBLL;
        private readonly IDepartmentBLL departmentBLL;
        private readonly IOtherReimburseBLL otherReimburseBLL;
        private readonly IOtherReimburse_DetailsBLL otherReimburse_DetailsBLL;

        public ReimbursementController(IBusinessTripBLL businessTripBLL, IAccountBLL accountBLL, IEmployeeInformationBLL employeeInformationBLL, IDepartmentBLL departmentBLL, IOtherReimburseBLL otherReimburseBLL, IOtherReimburse_DetailsBLL otherReimburse_DetailsBLL)
        {
            this.businessTripBLL = businessTripBLL;
            this.accountBLL = accountBLL;
            this.employeeInformationBLL = employeeInformationBLL;
            this.departmentBLL = departmentBLL;
            this.otherReimburseBLL = otherReimburseBLL;
            this.otherReimburse_DetailsBLL = otherReimburse_DetailsBLL;
        }

        // GET: Reimbursement
        public ActionResult Index()
        {
            return View();
        }

        /// <summary>
        /// 出差/接待报销历史记录页
        /// </summary>
        /// <returns></returns>
        public ActionResult TravelReimbursementHistoryView() {

            return View();
        }

        /// <summary>
        /// 其它报销申请历史记录页
        /// </summary>
        /// <returns></returns>
        public ActionResult OtherReimbursementHistoryView() {
            Session["View"] = true;
            var ac = GetAccountInfo();
            var model = BuildOtherReimburses(0);
            return View(model);
        }

        /// <summary>
        /// 其它报销申请页
        /// </summary>
        /// <returns></returns>
        public ActionResult ApplyOtherReimbursementView() {
            Session["View"] = true;
            OtherReimburseViewModel model = new OtherReimburseViewModel();
            return View(model);
        }

        /// <summary>
        /// 其它报销申请提交操作
        /// </summary>
        /// <returns></returns>
        public ActionResult OtherReimbursementAdd(OtherReimburseViewModel model) {
            if (Session["View"].ToString() == "false")
            {
                return Content("<script>alert('重复操作！');window.history.go(-1);");
            }
            var ac = GetAccountInfo();
            财务_其它报销 OtherReimbursementModel = new 财务_其它报销();
            OtherReimbursementModel.原借款 = model.原借款;
            OtherReimbursementModel.应退余款 = model.应退余款;
            OtherReimbursementModel.报销人ID = ac.用户ID;
            OtherReimbursementModel.报销部门ID = ac.部门;
            OtherReimbursementModel.提交日期 = DateTime.Now;
            OtherReimbursementModel.汇款银行 = model.汇款银行;
            OtherReimbursementModel.汇款银行卡账号 = model.汇款银行卡账号;
            if (ModelState.IsValid)
            {
                otherReimburseBLL.Add(OtherReimbursementModel);
                Session["View"] = false;
            }

            else
            {
                List<string> sb = new List<string>();
                //获取所有错误的Key
                List<string> Keys = ModelState.Keys.ToList();
                //获取每一个key对应的ModelStateDictionary
                foreach (var key in Keys)
                {
                    var errors = ModelState[key].Errors.ToList();
                    //将错误描述添加到sb中
                    foreach (var error in errors)
                    {
                        sb.Add(error.ErrorMessage);
                    }
                }
                string msg = null;
                foreach (var item in sb)
                {
                    msg += item.ToString() + "<br/>";
                }
                return Content("<script>alert('" + msg + "');window.history.go(-1);</script>");
            }
            return View();
        }

        /// <summary>
        ///  其它报销申请—详细提交操作
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult OtherReimbursement_DetailsAdd(int id,财务_其他报销_副表 OtherReimbursementModel) {
            if (Session["View"].ToString() == "false")
            {
                return Content("<script>alert('重复操作！');window.history.go(-1);");
            }
            var model = otherReimburseBLL.GetModel(p => p.ID == id);
            if (model==null)
            {
                return Json(false);
            }
            OtherReimbursementModel.其他报销ID = id;
            try
            {
                otherReimburse_DetailsBLL.Add(OtherReimbursementModel);
                Session["View"] = false;
            }
            catch (Exception e)
            {

                return Json(false);
            }
           
            return Json(true);

        }

        /// <summary>
        /// 其他报销详情页
        /// </summary>
        /// <param name="id">其他报销主表ID</param>
        /// <returns></returns>
        public ActionResult OtherReimbursement_DetailsView(int id) {
            Session["View"] = true;
            if (id<=0)
            {
              return Content("<script>alert('未查到数据！');window.history.go(-1);"); ;
            }
            var model = otherReimburseBLL.GetModel(p => p.ID == id);
            if (model==null)
            {
                return Content("<script>alert('未查到具体数据！');window.history.go(-1);");
            }
            return View(BuildOtherReimburse(model));
        }

        /// <summary>
        /// 财务审核页面
        /// </summary>
        /// <param name="dataType">审核的数据类型（0|1|2=》出差报销|接待报销|其他报销）</param>
        /// <param name="id">数据ID</param>
        /// <param name="result">审核结果</param>
        /// <returns></returns>
        public ActionResult CheckReimbursement(int dataType) {
            Session["View"] = true;
            var ac = GetAccountInfo();
            if (dataType==0)
            {

            }
            if (dataType==1)
            {

            }
            if (dataType==2)
            {
                var models = BuildOtherReimburses(1);
                if (models.Count()==0)
                {
                    return View();
                }
                return View(models);
            }
                return View();
           
    
        }

        /// <summary>
        /// 财务审核操作
        /// </summary>
        /// <param name="dataType">审核的数据类型（0|1|2=》出差报销|接待报销|其他报销）</param>
        /// <param name="id">数据ID</param>
        /// <param name="result">审核结果</param>
        /// <returns></returns>
        public ActionResult ReimbursementCheck(int dataType,int id, string result) {
            var ac = GetAccountInfo();
            if (dataType == 0)
            {

            }
            if (dataType == 1)
            {

            }
            if (dataType == 2)//其它报销申请
            {
                var model = otherReimburseBLL.GetModel(p => p.ID == id);
                if (model==null)
                {
                    return Content("<script>alert('数据库不存在该数据！');window.history.go(-1);");
                }
                if (result=="通过")
                {
                    model.审核状态 = true;
                }
                if (result=="驳回")
                {
                    model.审核状态 = false;
                }
               
                string[] property = new string[1];
                property[0] = "审核状态";
                try
                {
                   otherReimburseBLL.Modify(model, property);
                }
                catch (Exception e)
                {

                    return Content("<script>alert('提交数据出错！');window.history.go(-1);");
                }
                
                return RedirectToAction("OtherReimbursement_DetailsView",new { id=model.ID});
            }
            return View();
        }

        /// <summary>
        /// 构造其它报销数据集
        /// </summary>
        /// <param name="role">当前角色（0|1=》普通用户|审查）</param>
        /// <returns></returns>
        private List<OtherReimburseViewModel> BuildOtherReimburses(int role) {
            List<财务_其它报销> model = new List<财务_其它报销>();
            var ac = GetAccountInfo();
            if (role ==0)
            {
                model = otherReimburseBLL.GetModels(p => p.ID == ac.用户ID).ToList();
            }
            if (role==1)
            {
                model= otherReimburseBLL.GetModels(p => true).ToList();
            }
            else
            {
                return null;
            }
            List<OtherReimburseViewModel> otherReimburseViewModels = new List<OtherReimburseViewModel>();
            foreach (var item in model)
            {
                OtherReimburseViewModel otherReimburseViewModel = new OtherReimburseViewModel();
                otherReimburseViewModel = BuildOtherReimburse(item);
                otherReimburseViewModels.Add(otherReimburseViewModel);
            }
           
            return otherReimburseViewModels;
        }

        /// <summary>
        /// 构造单个其它报销实体
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        private OtherReimburseViewModel BuildOtherReimburse(财务_其它报销 model) {
            if (model==null)
            {
                return null;
            }
            var reimburseModels = otherReimburse_DetailsBLL.GetModels(p => p.其他报销ID == model.ID);
            if (reimburseModels.Count()==0)
            {
                return null;
            }
            OtherReimburseViewModel otherReimburseViewModel = new OtherReimburseViewModel();
            try
            {

            otherReimburseViewModel.ID = model.ID;
            otherReimburseViewModel.会计审核人ID = model.会计审核人ID;
            if (model.会计审核人ID>0)
            {
          otherReimburseViewModel.会计审核人 = accountBLL.GetModel(p => p.ID == model.会计审核人ID).姓名;
            }
           
            otherReimburseViewModel.原借款 = model.原借款;
            otherReimburseViewModel.审核状态 = model.审核状态;
            otherReimburseViewModel.应退余款 = model.应退余款;
            otherReimburseViewModel.报销人ID = model.报销人ID.Value;

            otherReimburseViewModel.报销人 = accountBLL.GetModel(p=>p.ID==model.报销人ID).姓名;
            otherReimburseViewModel.报销部门ID = model.报销部门ID.Value;
            otherReimburseViewModel.报销部门 = departmentBLL.GetModel(p => p.ID == model.报销部门ID).名称;
            otherReimburseViewModel.提交日期 = model.提交日期.Value;
            otherReimburseViewModel.汇款银行 = model.汇款银行;
            otherReimburseViewModel.汇款银行卡账号 = model.汇款银行卡账号;
            otherReimburseViewModel.财务_其他报销_副表 = reimburseModels.ToList();

            }
            catch (Exception e)
            {

                return null;
            }
            return otherReimburseViewModel;
        }

        /// <summary>
        /// 设置当前的用户信息
        /// </summary>
        private AcountInformation GetAccountInfo()
        {

            string userName = HttpContext.User.Identity.Name;
            if (userName != null)
            {

                var account = HttpContext.Session["Account"] as AcountInformation;
                return account;
            }
            else
            {
                return null;
            }

        }

        /// <summary>
        /// 获取公司员工信息
        /// </summary>
        /// <returns></returns>
        private List<CompanyStaffViewModel> GetCompanyStaff()
        {
            List<CompanyStaffViewModel> companyStaffViewModel = new List<CompanyStaffViewModel>();

            var accounts = accountBLL.GetModels(p => true).ToList();
            var employees = employeeInformationBLL.GetModels(p => true).ToList();
            for (int i = 0; i < accounts.Count(); i++)
            {
                HR_人员信息表 m = new HR_人员信息表();
                try
                {
                    var id = accounts.ElementAt(i).ID;
                    m = employeeInformationBLL.GetModel(p => p.用户ID == id);
                }
                catch (Exception e)
                {

                    throw e;
                }
                CompanyStaffViewModel ac = new CompanyStaffViewModel();
                if (m != null)
                {
                    ac.ID = m.ID;
                    ac.上级部门 = m.上级部门;
                    ac.姓名 = m.姓名;
                    ac.岗位 = m.岗位;
                    ac.用户ID = m.用户ID;
                    ac.职级 = m.职级;
                    ac.部门 = m.部门;
                    companyStaffViewModel.Add(ac);
                }
            }
            return companyStaffViewModel;
        }

    }
}