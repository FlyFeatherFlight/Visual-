using ChicST_MM.Model;
using System.Web.Mvc;
using ChicST_MM.IBLL;
using ChicST_MM.WEB.Models;
using System.Collections.Generic;
using System.Linq;

namespace ChicST_MM.WEB.Controllers
{
    /// <summary>
    /// 机票报销控制器
    /// </summary>
    public class AirFareController : Controller
    {
        private IAirFaresBLL airFaresBLL;
        private IAirfareSharingBLL airfareSharingBLL;
        private IAccountBLL accountBLL;
        private IEmployeeInformationBLL employeeInformationBLL;
        private IBusinessTripBLL businessTripBLL;

        public AirFareController(IAirFaresBLL airFaresBLL, IAirfareSharingBLL airfareSharingBLL, IAccountBLL accountBLL, IEmployeeInformationBLL employeeInformationBLL, IBusinessTripBLL businessTripBLL)
        {
            this.airFaresBLL = airFaresBLL;
            this.airfareSharingBLL = airfareSharingBLL;
            this.accountBLL = accountBLL;
            this.employeeInformationBLL = employeeInformationBLL;
            this.businessTripBLL = businessTripBLL;
        }

        // GET: AirFare
        public ActionResult Index()
        {
            return View();
        }

        /// <summary>
        /// 机票报销添加 视图
        /// </summary>
        /// <param name="id">出差ID</param>
        /// <returns></returns>
        public ActionResult AddAirFaresView(int id) {
            AirFaresViewModel model = new AirFaresViewModel();
            model.出差ID = id;
            return View(model);
        }

        /// <summary>
        /// 机票报销操作
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        public ActionResult AirFaresAdd(AirFaresViewModel model) {
            var ac = GetAccountInfo();
            财务_机票明细 m = new 财务_机票明细();
            m.其它费用 = model.其它费用;
            m.出发地 = model.出发地;
            m.出发日期 = model.出发日期;
            m.出差ID = model.出差ID;
            m.到达日期 = model.到达日期;
            m.制单人 = model.制单人;
            m.制单日期 = model.制单日期;
            m.备注 = model.备注;
            m.姓名 = model.姓名;
            m.机票价格 = model.机票价格;
            m.目的地 = model.目的地;
            m.订票人ID = model.订票人ID;
            m.订票日期 = model.订票日期;
            m.费用小计 = model.费用小计;
            m.退改费用 = model.退改费用;
            m.部门 = employeeInformationBLL.GetModel(p => p.用户ID == m.订票人ID).部门;

            if (ModelState.IsValid)
            {
                m = airFaresBLL.AddReturnModel(m);
                Session["View"] = false;
            }

            else
            {
                List<string> sb = new List<string>();
                //获取所有错误的Key
                List<string> Keys = ModelState.Keys.ToList();
                //获取每一个key对应的ModelStateDictionary
                foreach (var key in Keys)
                {
                    var errors = ModelState[key].Errors.ToList();
                    //将错误描述添加到sb中
                    foreach (var error in errors)
                    {
                        sb.Add(error.ErrorMessage);
                    }
                }
                string log = null;
                foreach (var item in sb)
                {
                    log += item.ToString() + "<br/>";
                }
                return Json(new { success=false, msg=log } );
            }
            return Json(new { success = true, msg = "提交成功！" });
        }

        /// <summary>
        /// 机票报销分摊 添加操作
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public ActionResult AirFareSharingAdd(AirFareSharingViewModel model) {
            财务_机票明细分摊 m = new 财务_机票明细分摊();
            m.分摊金额 = model.分摊金额;
            m.城市 = model.城市;
            m.备注 = model.备注;
            m.机票明细ID = model.机票明细ID;
            if (ModelState.IsValid)
            {
                m = airfareSharingBLL.AddReturnModel(m);
                Session["View"] = false;
            }

            else
            {
                List<string> sb = new List<string>();
                //获取所有错误的Key
                List<string> Keys = ModelState.Keys.ToList();
                //获取每一个key对应的ModelStateDictionary
                foreach (var key in Keys)
                {
                    var errors = ModelState[key].Errors.ToList();
                    //将错误描述添加到sb中
                    foreach (var error in errors)
                    {
                        sb.Add(error.ErrorMessage);
                    }
                }
                string log = null;
                foreach (var item in sb)
                {
                    log += item.ToString() + "<br/>";
                }
                return Json(new { success = false, msg = log });
            }
            return Json(new { success = true, msg = "提交成功!" });
        }

        /// <summary>
        /// 构建机票报销分摊实体
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        private AirFareSharingViewModel BuildAirFareSharingModel(财务_机票明细分摊 model) {
            AirFareSharingViewModel airFareSharingViewModel = new AirFareSharingViewModel();
            airFareSharingViewModel.ID = model.ID;
            airFareSharingViewModel.分摊金额 = model.分摊金额;
            airFareSharingViewModel.城市 = model.城市;
            airFareSharingViewModel.备注 = model.备注;
            airFareSharingViewModel.机票明细ID = model.机票明细ID.Value;
            return airFareSharingViewModel;

        }

        /// <summary>
        /// 构建机票报销分摊实体集
        /// </summary>
        /// <param name="id">机票报销ID</param>
        /// <returns></returns>
        private List<AirFareSharingViewModel> BuildAirFareSharingModels(int id) {
            var models = airfareSharingBLL.GetModels(p => p.机票明细ID == id);
            List<AirFareSharingViewModel> lis = new List<AirFareSharingViewModel>();
            foreach (var item in models)
            {
                var model = BuildAirFareSharingModel(item);
                lis.Add(model);
            }
            return lis;
        }
        /// <summary>
        /// 构建机票报销实体
        /// </summary>
        /// <param name="model"></param>
        /// <returns></returns>
        private AirFaresViewModel BuildAirFaresModel(财务_机票明细 model ) {
            AirFaresViewModel airFaresViewModel = new AirFaresViewModel();
            airFaresViewModel.ID = model.ID;
            airFaresViewModel.其它费用 = model.其它费用;
            airFaresViewModel.出发地 = model.出发地;
            airFaresViewModel.出发日期 = model.出发日期.Value;
            airFaresViewModel.出差ID = model.出差ID.Value;
            airFaresViewModel.到达日期 = model.到达日期.Value;
            airFaresViewModel.制单人 = model.制单人.Value;
            airFaresViewModel.制单日期 = model.制单日期.Value;
            airFaresViewModel.备注 = model.备注;
            airFaresViewModel.姓名 = model.姓名;
            airFaresViewModel.审核人ID = model.审核人ID.Value;
            airFaresViewModel.审核人 = employeeInformationBLL.GetModel(p => p.用户ID == airFaresViewModel.审核人ID).姓名;
            airFaresViewModel.审核日期 = model.审核日期.Value;
            airFaresViewModel.审核标志 = model.审核标志;
            airFaresViewModel.机票价格 = model.机票价格;
            airFaresViewModel.目的地 = model.目的地;
            airFaresViewModel.订票人ID = model.订票人ID.Value;
            airFaresViewModel.订票人 = employeeInformationBLL.GetModel(p => p.ID == airFaresViewModel.订票人ID).姓名;
            airFaresViewModel.订票日期 = model.订票日期.Value;
            airFaresViewModel.费用小计 = model.费用小计.Value;
            airFaresViewModel.退改费用 = model.退改费用;
            airFaresViewModel.部门 = model.部门;
            return airFaresViewModel;
        }

        /// <summary>
        /// 构建机票报销实体集
        /// </summary>
        /// <returns></returns>
        private List<AirFaresViewModel> BuildAirFaresModels() {
            var ac = GetAccountInfo();
            var models = airFaresBLL.GetModels(p=>p.订票人ID==ac.用户ID);
            List<AirFaresViewModel> lis = new List<AirFaresViewModel>();
            foreach (var item in models)
            {
                var model = BuildAirFaresModel(item);
                lis.Add(model);

            }
            return lis;
        }
        /// <summary>
        /// 获取用户信息
        /// </summary>
        /// <returns></returns>
        private AcountInformation GetAccountInfo()
        {

            string userName = HttpContext.User.Identity.Name;
            if (userName != null)
            {

                var account = HttpContext.Session["Account"] as AcountInformation;
                return account;
            }
            else
            {
                return null;
            }

        }

    }
}